global(VERSION_saker.maven.classpath) = "0.8.2"

compile(
	out javac,
){
	$javac = saker.java.compile(
		SourceDirectories: [
			main/src/,
			api/src/,
			impl/src/,
		],
		ClassPath: [
			saker.java.classpath.bundle(nest.dependency.resolve(
				[
					saker.java.compiler-api,
					saker.build-api,
					saker.nest-api,
					saker.maven.support,
				], 
				Filters: nest.dependency.filter.compile(CompileTransitive: false)
			)),
			
		],
		Identifier: saker.maven.classpath,
	)
}
export(
	in compile = include(compile),
	out mainjar,
	out sourcejar,
	
	out bundlepaths = [
		$mainjar[Path],
		$apijar[Path],
		$impljar[Path],
		$sourcejar[Path],
	]
){
	$mainjar = saker.jar.create(
		Output: saker.maven.classpath.jar,
		Resources: [
			{
				Directory: main/resources/,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/maven/classpath/main/**,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.maven.classpath-v{ global(VERSION_saker.maven.classpath) }",
				Nest-Bundle-Source: "saker.maven.classpath-sources-v{ global(VERSION_saker.maven.classpath) }"
			},
		},
	)
	$apijar = saker.jar.create(
		Output: saker.maven.classpath-api.jar,
		Resources: [
			{
				Directory: api/resources/,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/maven/classpath/api/**,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.maven.classpath-api-v{ global(VERSION_saker.maven.classpath) }",
				Nest-Bundle-Source: "saker.maven.classpath-sources-v{ global(VERSION_saker.maven.classpath) }"
			},
		},
	)
	$impljar = saker.jar.create(
		Output: saker.maven.classpath-impl.jar,
		Resources: [
			{
				Directory: impl/resources/,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/maven/classpath/impl/**,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.maven.classpath-impl-v{ global(VERSION_saker.maven.classpath) }",
				Nest-Bundle-Source: "saker.maven.classpath-sources-v{ global(VERSION_saker.maven.classpath) }"
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: saker.maven.classpath-sources.jar,
		Resources: [
			{
				Directory: [
					main/src/,
					api/src/,
					impl/src/,
				],
				Resources: **/*.java,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.maven.classpath-sources-v{ global(VERSION_saker.maven.classpath) }",
			},
		},
	)
}
install() {
	$export = include(export)
	nest.local.install($export[bundlepaths])
}
upload(){
	$export = include(export, Path: saker.build)
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(saker.maven.classpath.UPLOAD_API_KEY),
		APISecret: global(saker.maven.classpath.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}